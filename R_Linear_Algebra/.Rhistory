str(data)
print(lm)
lm(data$SepalLengthCm~data$SepalWidthCm)
print(lm)
model <-lm(data$SepalLengthCm~data$SepalWidthCm)
print(lm)
print(model)
mod <-lm(data$SepalLengthCm~data$SepalWidthCm)
mod <-lm(formula=data$SepalLengthCm~data$SepalWidthCm)
mod <-lm(data$SepalLengthCm ~ data$SepalWidthCm)
plot(data$SepalLengthCm,data$SepalWidthCm,
main = "length vs width" ,
xlab = "length" ,
ylab ="width")
str(data)
print(mod)
plot(data$SepalLengthCm,data$SepalWidthCm,main = "length vs width" ,xlab = "length" ,ylab ="width")
str(data)
mod <-lm(data$SepalLengthCm ~ data$SepalWidthCm)
print(mod)
data1 <- read.delim("E:\\DATASETS\\iriscsv\\Iris.csv",row.names = 1)
print(head(data1))
print(tail(data1))
plot(data1$SepalLengthCm,data1$SepalWidthCm,main = "length vs width" ,xlab = "length" ,ylab ="width")
str(data)
mod <-lm(SepalLengthCm ~ SepalWidthCm,data =data1)
print(mod)
summary(mod)
data1 <- read.delim("E:\\DATASETS\\iriscsv\\Iris.csv",row.names = 1)
print(head(data1))
print(tail(data1))
plot(data1$SepalLengthCm,data1$SepalWidthCm,main = "length vs width" ,xlab = "length" ,ylab ="width")
str(data)
mod <-lm(formula = SepalLengthCm ~ SepalWidthCm,data =data1)
summary(mod)
data1 <- read.delim("E:\\DATASETS\\iriscsv\\Iris.csv")
print(head(data1))
View(x)
print(summary(mod))
data1 <- read.delim("E:\\DATASETS\\iriscsv\\Iris.csv")
print(head(data1))
print(tail(data1))
plot(data1$SepalLengthCm,data1$SepalWidthCm,main = "length vs width" ,xlab = "length" ,ylab ="width")
str(data)
mod <-lm(formula = SepalLengthCm ~ SepalWidthCm,data =data1)
print(summary(mod))
library(alr3)
mod <-lm(SepalLengthCm ~ SepalWidthCm,data =data1)
data1 <- read.delim("E:\\DATASETS\\iriscsv\\Iris.csv")
print(head(data1))
print(tail(data1))
plot(data1$SepalLengthCm,data1$SepalWidthCm,main = "length vs width" ,xlab = "length" ,ylab ="width")
str(data)
mod <-lm(SepalLengthCm ~ SepalWidthCm,data =data1)
print(summary(mod))
mod <-lm(SepalLengthCm ~ SepalWidthCm,data = data1)
print(summary(mod))
summary(mpdelwa)
mpdelwa <- lm(SepalLengthCm ~ SepalWidthCm,data = data1)
data1 <- read.delim("E:\\DATASETS\\iriscsv\\Iris.csv")
print(head(data1))
print(tail(data1))
plot(data1$SepalLengthCm,data1$SepalWidthCm,main = "length vs width" ,xlab = "length" ,ylab ="width")
str(data)
mpdelwa <- lm(SepalLengthCm ~ SepalWidthCm,data = data1)
summary(mpdelwa)
plot(data1$SepalLengthCm,data1$SepalWidthCm,main = "length vs width" ,xlab = "length" ,ylab ="width")
data1 <- read.delim("E:\\DATASETS\\iriscsv\\Iris.csv")
print(head(data1))
print(tail(data1))
plot(data1$SepalLengthCm,data1$SepalWidthCm,main = "length vs width" ,xlab = "length" ,ylab ="width")
str(data)
mpdelwa <- lm(SepalLengthCm ~ SepalWidthCm,data = data1)
summary(mpdelwa)
source('E:/Learn-Git/machine_learning/R_Test_Regression/Regression_OLS.R', echo=TRUE)
source('E:/Learn-Git/machine_learning/R_Test_Regression/Regression_OLS.R', echo=TRUE)
source('E:/Learn-Git/machine_learning/R_Test_Regression/Regression_OLS.R', echo=TRUE)
help("xlim")
plot(data1$SepalLengthCm,data1$SepalWidthCm,main = "length vs width" ,xlab = "length" ,ylab ="width")
data1 <- read.delim("E:\\DATASETS\\iriscsv\\Iris.csv")
plot(data1$SepalLengthCm,data1$SepalWidthCm,main = "length vs width" ,xlab = "length" ,ylab ="width")
data1 <- read.delim("E:\\DATASETS\\iriscsv\\Iris.csv")
plot(data1$SepalLengthCm,data1$SepalWidthCm,main = "length vs width" ,xlab = "length" ,ylab ="width")
View(data)
rm(ls())
rm(ls=all())
rm(list=ls())
data1 <- read.delim("E:\\DATASETS\\iriscsv\\Iris.csv")
plot(data1$SepalLengthCm,data1$SepalWidthCm,main = "length vs width" ,xlab = "length" ,ylab ="width")
plot(data1$SepalLengthCm,data1$SepalWidthCm,main = "length vs width" , xlab = "length" , ylab ="width" )
data$SepalLengthCm
data1$SepalLengthCm
plot(data1$SepalLengthCm,data1$SepalWidthCm,main = "length vs width" , xlab = "length" , ylab ="width" )
View(data1)
View(data1)
View(data1)
head(data1)
data1 <- read.delim("E:\\DATASETS\\iriscsv\\Iris.csv",sep=',')
plot(data1$SepalLengthCm,data1$SepalWidthCm,main = "length vs width" , xlab = "length" , ylab ="width" )
model_linear = lm(data1$SepalLengthCm , data1$SepalWidthCm)
summary(model_linear)
data1 <- read.delim("E:\\DATASETS\\iriscsv\\Iris.csv",sep=',')
plot(data1$SepalLengthCm,data1$SepalWidthCm,main = "length vs width" , xlab = "length" , ylab ="width" )
model_linear = lm(data1$SepalLengthCm ~ data1$SepalWidthCm)
summary(model_linear)
data1 <- read.delim("C:\\Users\\HP\\Desktop\\Data_science_for_engineers\\bonds.txt",sep=',')
data1 <- read.delim("C:\\Users\\HP\\Desktop\\Data_science_for_engineers\\bonds.txt",sep=',')
plot(data1$SepalLengthCm,data1$SepalWidthCm,main = "length vs width" , xlab = "length" , ylab ="width" )
model_linear = lm(data1$SepalLengthCm ~ data1$SepalWidthCm)
summary(model_linear)
data1 <- read.delim("C:\\Users\\HP\\Desktop\\Data_science_for_engineers\\bonds.txt")
data1 <- read.delim("C:\\Users\\HP\\Desktop\\Data_science_for_engineers\\bonds.txt")
plot(data1$SepalLengthCm,data1$SepalWidthCm,main = "length vs width" , xlab = "length" , ylab ="width" )
model_linear = lm(data1$SepalLengthCm ~ data1$SepalWidthCm)
summary(model_linear)
rm(list=ls())
source('E:/Learn-Git/machine_learning/R_Test_Regression/Regression_OLS.R', echo=TRUE)
data1 <- read.delim("C:\\Users\\HP\\Desktop\\Data_science_for_engineers\\bonds.txt")
plot(data1$BidPrice,data1$CouponRate,main = "length vs width" , xlab = "length" , ylab ="width" )
model_linear = lm(data1$SepalLengthCm ~ data1$SepalWidthCm)
summary(model_linear)
model_linear = lm(data1$BidPrice~data1$CouponRate)
summary(model_linear)
data1 <- read.delim("C:\\Users\\HP\\Desktop\\Data_science_for_engineers\\bonds.txt")
plot(data1$BidPrice,data1$CouponRate,main = "length vs width" , xlab = "length" , ylab ="width" )
model_linear = lm(data1$BidPrice~data1$CouponRate)
summary(model_linear)
abline(a=.9725,b=.025)
data1 <- read.delim("C:\\Users\\HP\\Desktop\\Data_science_for_engineers\\bonds.txt")
plot(data1$BidPrice,data1$CouponRate,main = "length vs width" , xlab = "length" , ylab ="width" )
model_linear = lm(data1$BidPrice~data1$CouponRate,rstandard(data1))
summary(model_linear)
model_linear = lm(data1$BidPrice~data1$CouponRate)
data1 <- read.delim("C:\\Users\\HP\\Desktop\\Data_science_for_engineers\\bonds.txt")
plot(data1$BidPrice,data1$CouponRate,main = "length vs width" , xlab = "length" , ylab ="width" )
model_linear = lm(data1$BidPrice~data1$CouponRate)
summary(model_linear)
data1 <- read.delim("C:\\Users\\HP\\Desktop\\Data_science_for_engineers\\bonds.txt")
head(data)
tail(data)
plot(data1$BidPrice,data1$CouponRate,main = "length vs width" , xlab = "length" , ylab ="width" )
model_linear = lm(data1$BidPrice~data1$CouponRate)
summary(model_linear)
summary(data)
tail(data)
plot(data1$BidPrice,data1$CouponRate,main = "length vs width" , xlab = "length" , ylab ="width" )
data1 <- read.delim("C:\\Users\\HP\\Desktop\\Data_science_for_engineers\\bonds.txt")
head(data)
tail(data)
plot(data1$BidPrice,data1$CouponRate,main = "length vs width" , xlab = "length" , ylab ="width" )
abline(h=2,lty=2)
model_linear = lm(data1$BidPrice~data1$CouponRate)
summary(model_linear)
abline(h=-2,lty=2)
plot(data1$BidPrice,data1$CouponRate,main = "length vs width" , xlab = "length" , ylab ="width" ,rstandard(data1))
data1 <- read.delim("C:\\Users\\HP\\Desktop\\Data_science_for_engineers\\bonds.txt",row.names = 1)
head(data)
tail(data)
plot(data1$BidPrice,data1$CouponRate,main = "length vs width" , xlab = "length" , ylab ="width" ,rstandard(data1))
abline(h=2,lty=2)
abline(h=-2,lty=2)
model_linear = lm(data1$BidPrice~data1$CouponRate)
summary(model_linear)
class(data1)
data1 <- read.delim("C:\\Users\\HP\\Desktop\\Data_science_for_engineers\\bonds.txt",row.names = 1)
class(data1)
head(data)
tail(data)
plot(data1$BidPrice,data1$CouponRate,main = "length vs width" , xlab = "length" , ylab ="width" ,rstandard(data1))
abline(h=2,lty=2)
abline(h=-2,lty=2)
model_linear = lm(data1$BidPrice~data1$CouponRate)
summary(model_linear)
plot(model_linear$BidPrice,model_linear$CouponRate,main = "length vs width" , xlab = "length" , ylab ="width" ,rstandard(data1))
plot(model_linear$BidPrice,model_linear$CouponRate, ,rstandard(data1)),main = "length vs width" , xlab = "length" , ylab ="width" ,rstandard(data1))
plot(model_linear$BidPrice,model_linear$CouponRate,rstandard(model_linear),main = "length vs width" , xlab = "length" , ylab ="width" ,rstandard(data1))
summary(model_linear)
plot(model_linear$BidPrice,model_linear$CouponRate,rstandard(data1),main = "length vs width" , xlab = "length" , ylab ="width" ,rstandard(data1))
summary(model_linear)
plot(model_linear$BidPrice,model_linear$CouponRate,main = "length vs width" , xlab = "length" , ylab ="width" ,rstandard(data1))
plot(model_linear$BidPrice,model_linear$CouponRate,main = "length vs width" , xlab = "length" , ylab ="width"
summary(model_linear)
plot(model_linear$BidPrice,model_linear$CouponRate)
plot(model_linear$BidPrice,model_linear$CouponRate,type =1)
data1 <- read.delim("C:\\Users\\HP\\Desktop\\Data_science_for_engineers\\bonds.txt",row.names = 1)
class(data1)
head(data)
tail(data)
model_linear = lm(data1$BidPrice~data1$CouponRate)
plot(model_linear$fitted.values,model_linear$CouponRate,type =1)
summary(model_linear)
plot(model_linear$fitted.values,model_linear$CouponRate,type =1)
plot(model_linear$fitted.values,type =1)
View(model_linear)
View(model_linear)
data1 <- read.delim("C:\\Users\\HP\\Desktop\\Data_science_for_engineers\\bonds.txt",row.names = 1)
class(data1)
head(data)
tail(data)
model_linear = lm(data1$BidPrice~data1$CouponRate)
plot(model_linear$fitted.values,type =1)
summary(model_linear)
data1 <- read.delim("C:\\Users\\HP\\Desktop\\Data_science_for_engineers\\bonds.txt",row.names = 1)
class(data1)
head(data)
tail(data)
model_linear = lm(data1$BidPrice~data1$CouponRate)
plot(data1$BidPrice~data1$CouponRate,type =1)
summary(model_linear)
plot(data1$BidPrice~data1$CouponRate)
#summary of model
summary(model_linear)
#plot graph
eruption = rstandard(model_linear)
abline(0,0)
abline(0,0)
#summary of model
summary(model_linear)
rm(list=ls())
# read data from file
data1 <- read.delim("C:\\Users\\HP\\Desktop\\Data_science_for_engineers\\bonds.txt",row.names = 1)
# create model
model_linear = lm(data1$BidPrice~data1$CouponRate)
#plot graph
eruption = rstandard(model_linear)
plot(data1$CouponRate, eruption$BidPrice,
+     ylab="Standardized Residuals",
+     xlab="Waiting Time",
+     main="Old Faithful Eruptions")
abline(0,0)
#summary of model
summary(model_linear)
plot(data1$CouponRate, eruption$BidPrice,
ylab="Standardized Residuals",
xlab="Waiting Time",
main="Old Faithful Eruptions")
plot(data1$CouponRate, eruption$BidPrice, ylab="Standardized Residuals",xlab="Waiting Time",main="Old Faithful Eruptions")
plot(data1$CouponRate, eruption, ylab="Standardized Residuals",xlab="Waiting Time",main="Old Faithful Eruptions")
plot(data1$BidPrice, eruption, ylab="Standardized Residuals",xlab="Waiting Time",main="Old Faithful Eruptions")
# read data from file
data1 <- read.delim("C:\\Users\\HP\\Desktop\\Data_science_for_engineers\\bonds.txt",row.names = 1)
# create model
model_linear = lm(data1$BidPrice~data1$CouponRate)
#plot graph
eruption = rstandard(model_linear)
plot(data1$BidPrice, eruption, ylab="Standardized Residuals",xlab="Waiting Time",main="Old Faithful Eruptions")
abline(0,0)
#summary of model
summary(model_linear)
View(model_linear)
model_linear$coefficients
model_linear$coefficients[0]
typeof(model_linear$coefficients)
typeof(model_linear$coefficients)[1]
typeof(model_linear$coefficients)[2]
typeof(model_linear$coefficients).attr
model_linear$coefficients[1]
model_linear$coefficients[2]
#Test for obtained statistics :
beta0 = model_linear$coefficients[1]
View(model_linear)
beta1 = model_linear$coefficients[2]
model_linear$fitted.values
#plot graph
eruption = rstandard(model_linear$fitted.values)
sse = sum((model_linear$fitted.values - mean(data1$BidPrice))^2)
View(model_linear)
sst = sum((data1$BidPrice - mean(data1$BidPrice))^2)
ssr = sst-sse
Fscore = (ssr/sse)*33
Fscore = (sse/ssr)*33
sse = sum((model_linear$fitted.values - (data1$BidPrice))^2)
# read data from file
data1 <- read.delim("C:\\Users\\HP\\Desktop\\Data_science_for_engineers\\bonds.txt",row.names = 1)
# create model
model_linear = lm(data1$BidPrice~data1$CouponRate)
#plot graph
eruption = rstandard(model_linear$fitted.values)
plot(data1$BidPrice, eruption, ylab="Standardized Residuals",xlab="Waiting Time",main="Old Faithful Eruptions")
abline(0,0)
#summary of model
summary(model_linear)
#Test for obtained statistics :
beta0 = model_linear$coefficients[1]
beta1 = model_linear$coefficients[2]
sse = sum((model_linear$fitted.values - (data1$BidPrice))^2)
sst = sum((data1$BidPrice - mean(data1$BidPrice))^2)
ssr = sst-sse
Fscore = (sse/ssr)*33
Fscore = (ssr/sse)*(35-2)
hessian(z,c)
library(pracma)
f <- function(x) cos(x[1] + x[2])
x0 <- c(0, 0)
hessian(f, x0)
f <- function(u) {
x <- u[1]; y <- u[2]; z <- u[3]
return(x^3 + y^2 + z^2 +12*x*y + 2*z)
}
x0 <- c(1,1,1)
hessian(f, x0)
library(pracma)
f <- function(x)
cos(x[1] + x[2])
x0 <- c(0, 0)
hessian(f, x0)
f <- function(u) {
x <- u[1]; y <- u[2]; z <- u[3]
return(x^3 + y^2 + z^2 +12*x*y + 2*z)
}
x0 <- c(1,1,1)
hessian(f, x0)
#define polynomial
poly <-function (u){
x<-u[1]
y<-u[2]
z<-u[3]
return (x^2 +y^2 +z^2)
}
#define a point of evaluation , staionary point
vec <- c(2,3,4)
# evaluate hessian
hessian(poly,vec)
#define polynomial
poly <-function (u){
x<-u[1]
y<-u[2]
z<-u[3]
return (x^2 +y^2 +z^2)
}
#define a point of evaluation , staionary point
vec <- c(2,3,4)
# evaluate hessian
hessian_matrix<-hessian(poly,vec)
# test for hessian to be positive definite
x=eigen(hessian_matrix)
View(x)
View(x)
#define polynomial
poly <-function (u){
x<-u[1]
y<-u[2]
z<-u[3]
return (x^2 +y^2 +z^2)
}
#define a point of evaluation , staionary point
vec <- c(2,3,4)
# evaluate hessian
hessian_matrix<-hessian(poly,vec)
# test for hessian to be positive definite
x=eigen(hessian_matrix)
# extract components
(values <- ev$values)
## [1] 17  8  7
(vectors <- ev$vectors)
#define polynomial
poly <-function (u){
x<-u[1]
y<-u[2]
z<-u[3]
return (x^2 +y^2 +z^2)
}
#define a point of evaluation , staionary point
vec <- c(2,3,4)
# evaluate hessian
hessian_matrix<-hessian(poly,vec)
# test for hessian to be positive definite
ev=eigen(hessian_matrix)
# extract components
(values <- ev$values)
## [1] 17  8  7
(vectors <- ev$vectors)
print(i)
print(values[i])
for  ( i in lengths(values) ){
print(values[i])
}
#define polynomial
poly <-function (u){
x<-u[1]
y<-u[2]
z<-u[3]
return (x^2 +y^2 +z^2)
}
#define a point of evaluation , staionary point
vec <- c(2,3,4)
# evaluate hessian
hessian_matrix<-hessian(poly,vec)
# test for hessian to be positive definite
ev=eigen(hessian_matrix)
# extract components
(values <- ev$values)
## [1] 17  8  7
(vectors <- ev$vectors)
flag = FALSE
for  ( i in lengths(values) ){
if (values[i]>0){
flag =TRUE
}
}
if (flag==TRUE)
print("positive definite")
flag =FALSE
#define polynomial
poly <-function (u){
x<-u[1]
y<-u[2]
z<-u[3]
return (x^2 +y^2 +z^2)
}
#define a point of evaluation , staionary point
vec <- c(2,3,4)
# evaluate hessian
hessian_matrix<-hessian(poly,vec)
# test for hessian to be positive definite
ev=eigen(hessian_matrix)
# extract components
(values <- ev$values)
## [1] 17  8  7
(vectors <- ev$vectors)
flag = FALSE
for  ( i in lengths(values) ){
if (values[i]>0){
flag =TRUE
}
else
flag =FALSE
}
if (flag==TRUE)
print("positive definite")
#define polynomial
poly <-function (u){
x<-u[1]
y<-u[2]
z<-u[3]
return (x^2 +y^2 +z^2)
}
#define a point of evaluation , staionary point
vec <- c(2,3,4)
# evaluate hessian
hessian_matrix<-hessian(poly,vec)
# test for hessian to be positive definite
ev=eigen(hessian_matrix)
# extract components
(values <- ev$values)
flag = FALSE
for  ( i in lengths(values) ){
if (values[i]>0){
flag =TRUE
}
else
flag =FALSE
}
if (flag==TRUE)
print("positive definite")
#define polynomial
poly <-function (u){
x<-u[1]
y<-u[2]
z<-u[3]
return (x^2 +y^2 +z^2)
}
#define a point of evaluation , staionary point
vec <- c(2,3,4)
# evaluate hessian
hessian_matrix<-hessian(poly,vec)
# test for hessian to be positive definite
ev=eigen(hessian_matrix)
# extract components
(values <- ev$values)
flag = FALSE
for  ( i in lengths(values) ){
if (values[i]>0){
flag =TRUE
}
else
flag =FALSE
}
if (flag==TRUE)
print("positive definite")
#define polynomial
poly <-function (u){
x<-u[1]
y<-u[2]
z<-u[3]
return (x^2 +y^2 +z^2)
}
#define a point of evaluation , staionary point
vec <- c(2,3,4)
# evaluate hessian
hessian_matrix<-hessian(poly,vec)
# test for hessian to be positive definite
ev=eigen(hessian_matrix)
# extract components
(values <- ev$values)
flag = FALSE
for  ( i in lengths(values) ){
if (values[i]>0){
flag =TRUE
}
else
flag =FALSE
}
if (flag==TRUE)
print("positive definite")
setwd("E://")
setwd("Learn-Git/machine_learning/R_Linear_Algebra/")
# setwd("E://")
# setwd("Learn-Git/machine_learning/R_Linear_Algebra/")
setwd("~/")
setwd("E://")
setwd("Learn-Git/machine_learning/R_Linear_Algebra/")
