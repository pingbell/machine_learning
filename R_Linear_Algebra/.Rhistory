plot(data1$SepalLengthCm,data1$SepalWidthCm,main = "length vs width" , xlab = "length" , ylab ="width" )
model_linear = lm(data1$SepalLengthCm , data1$SepalWidthCm)
summary(model_linear)
data1 <- read.delim("E:\\DATASETS\\iriscsv\\Iris.csv",sep=',')
plot(data1$SepalLengthCm,data1$SepalWidthCm,main = "length vs width" , xlab = "length" , ylab ="width" )
model_linear = lm(data1$SepalLengthCm ~ data1$SepalWidthCm)
summary(model_linear)
data1 <- read.delim("C:\\Users\\HP\\Desktop\\Data_science_for_engineers\\bonds.txt",sep=',')
data1 <- read.delim("C:\\Users\\HP\\Desktop\\Data_science_for_engineers\\bonds.txt",sep=',')
plot(data1$SepalLengthCm,data1$SepalWidthCm,main = "length vs width" , xlab = "length" , ylab ="width" )
model_linear = lm(data1$SepalLengthCm ~ data1$SepalWidthCm)
summary(model_linear)
data1 <- read.delim("C:\\Users\\HP\\Desktop\\Data_science_for_engineers\\bonds.txt")
data1 <- read.delim("C:\\Users\\HP\\Desktop\\Data_science_for_engineers\\bonds.txt")
plot(data1$SepalLengthCm,data1$SepalWidthCm,main = "length vs width" , xlab = "length" , ylab ="width" )
model_linear = lm(data1$SepalLengthCm ~ data1$SepalWidthCm)
summary(model_linear)
rm(list=ls())
source('E:/Learn-Git/machine_learning/R_Test_Regression/Regression_OLS.R', echo=TRUE)
data1 <- read.delim("C:\\Users\\HP\\Desktop\\Data_science_for_engineers\\bonds.txt")
plot(data1$BidPrice,data1$CouponRate,main = "length vs width" , xlab = "length" , ylab ="width" )
model_linear = lm(data1$SepalLengthCm ~ data1$SepalWidthCm)
summary(model_linear)
model_linear = lm(data1$BidPrice~data1$CouponRate)
summary(model_linear)
data1 <- read.delim("C:\\Users\\HP\\Desktop\\Data_science_for_engineers\\bonds.txt")
plot(data1$BidPrice,data1$CouponRate,main = "length vs width" , xlab = "length" , ylab ="width" )
model_linear = lm(data1$BidPrice~data1$CouponRate)
summary(model_linear)
abline(a=.9725,b=.025)
data1 <- read.delim("C:\\Users\\HP\\Desktop\\Data_science_for_engineers\\bonds.txt")
plot(data1$BidPrice,data1$CouponRate,main = "length vs width" , xlab = "length" , ylab ="width" )
model_linear = lm(data1$BidPrice~data1$CouponRate,rstandard(data1))
summary(model_linear)
model_linear = lm(data1$BidPrice~data1$CouponRate)
data1 <- read.delim("C:\\Users\\HP\\Desktop\\Data_science_for_engineers\\bonds.txt")
plot(data1$BidPrice,data1$CouponRate,main = "length vs width" , xlab = "length" , ylab ="width" )
model_linear = lm(data1$BidPrice~data1$CouponRate)
summary(model_linear)
data1 <- read.delim("C:\\Users\\HP\\Desktop\\Data_science_for_engineers\\bonds.txt")
head(data)
tail(data)
plot(data1$BidPrice,data1$CouponRate,main = "length vs width" , xlab = "length" , ylab ="width" )
model_linear = lm(data1$BidPrice~data1$CouponRate)
summary(model_linear)
summary(data)
tail(data)
plot(data1$BidPrice,data1$CouponRate,main = "length vs width" , xlab = "length" , ylab ="width" )
data1 <- read.delim("C:\\Users\\HP\\Desktop\\Data_science_for_engineers\\bonds.txt")
head(data)
tail(data)
plot(data1$BidPrice,data1$CouponRate,main = "length vs width" , xlab = "length" , ylab ="width" )
abline(h=2,lty=2)
model_linear = lm(data1$BidPrice~data1$CouponRate)
summary(model_linear)
abline(h=-2,lty=2)
plot(data1$BidPrice,data1$CouponRate,main = "length vs width" , xlab = "length" , ylab ="width" ,rstandard(data1))
data1 <- read.delim("C:\\Users\\HP\\Desktop\\Data_science_for_engineers\\bonds.txt",row.names = 1)
head(data)
tail(data)
plot(data1$BidPrice,data1$CouponRate,main = "length vs width" , xlab = "length" , ylab ="width" ,rstandard(data1))
abline(h=2,lty=2)
abline(h=-2,lty=2)
model_linear = lm(data1$BidPrice~data1$CouponRate)
summary(model_linear)
class(data1)
data1 <- read.delim("C:\\Users\\HP\\Desktop\\Data_science_for_engineers\\bonds.txt",row.names = 1)
class(data1)
head(data)
tail(data)
plot(data1$BidPrice,data1$CouponRate,main = "length vs width" , xlab = "length" , ylab ="width" ,rstandard(data1))
abline(h=2,lty=2)
abline(h=-2,lty=2)
model_linear = lm(data1$BidPrice~data1$CouponRate)
summary(model_linear)
plot(model_linear$BidPrice,model_linear$CouponRate,main = "length vs width" , xlab = "length" , ylab ="width" ,rstandard(data1))
plot(model_linear$BidPrice,model_linear$CouponRate, ,rstandard(data1)),main = "length vs width" , xlab = "length" , ylab ="width" ,rstandard(data1))
plot(model_linear$BidPrice,model_linear$CouponRate,rstandard(model_linear),main = "length vs width" , xlab = "length" , ylab ="width" ,rstandard(data1))
summary(model_linear)
plot(model_linear$BidPrice,model_linear$CouponRate,rstandard(data1),main = "length vs width" , xlab = "length" , ylab ="width" ,rstandard(data1))
summary(model_linear)
plot(model_linear$BidPrice,model_linear$CouponRate,main = "length vs width" , xlab = "length" , ylab ="width" ,rstandard(data1))
plot(model_linear$BidPrice,model_linear$CouponRate,main = "length vs width" , xlab = "length" , ylab ="width"
summary(model_linear)
plot(model_linear$BidPrice,model_linear$CouponRate)
plot(model_linear$BidPrice,model_linear$CouponRate,type =1)
data1 <- read.delim("C:\\Users\\HP\\Desktop\\Data_science_for_engineers\\bonds.txt",row.names = 1)
class(data1)
head(data)
tail(data)
model_linear = lm(data1$BidPrice~data1$CouponRate)
plot(model_linear$fitted.values,model_linear$CouponRate,type =1)
summary(model_linear)
plot(model_linear$fitted.values,model_linear$CouponRate,type =1)
plot(model_linear$fitted.values,type =1)
View(model_linear)
View(model_linear)
data1 <- read.delim("C:\\Users\\HP\\Desktop\\Data_science_for_engineers\\bonds.txt",row.names = 1)
class(data1)
head(data)
tail(data)
model_linear = lm(data1$BidPrice~data1$CouponRate)
plot(model_linear$fitted.values,type =1)
summary(model_linear)
data1 <- read.delim("C:\\Users\\HP\\Desktop\\Data_science_for_engineers\\bonds.txt",row.names = 1)
class(data1)
head(data)
tail(data)
model_linear = lm(data1$BidPrice~data1$CouponRate)
plot(data1$BidPrice~data1$CouponRate,type =1)
summary(model_linear)
plot(data1$BidPrice~data1$CouponRate)
#summary of model
summary(model_linear)
#plot graph
eruption = rstandard(model_linear)
abline(0,0)
abline(0,0)
#summary of model
summary(model_linear)
rm(list=ls())
# read data from file
data1 <- read.delim("C:\\Users\\HP\\Desktop\\Data_science_for_engineers\\bonds.txt",row.names = 1)
# create model
model_linear = lm(data1$BidPrice~data1$CouponRate)
#plot graph
eruption = rstandard(model_linear)
plot(data1$CouponRate, eruption$BidPrice,
+     ylab="Standardized Residuals",
+     xlab="Waiting Time",
+     main="Old Faithful Eruptions")
abline(0,0)
#summary of model
summary(model_linear)
plot(data1$CouponRate, eruption$BidPrice,
ylab="Standardized Residuals",
xlab="Waiting Time",
main="Old Faithful Eruptions")
plot(data1$CouponRate, eruption$BidPrice, ylab="Standardized Residuals",xlab="Waiting Time",main="Old Faithful Eruptions")
plot(data1$CouponRate, eruption, ylab="Standardized Residuals",xlab="Waiting Time",main="Old Faithful Eruptions")
plot(data1$BidPrice, eruption, ylab="Standardized Residuals",xlab="Waiting Time",main="Old Faithful Eruptions")
# read data from file
data1 <- read.delim("C:\\Users\\HP\\Desktop\\Data_science_for_engineers\\bonds.txt",row.names = 1)
# create model
model_linear = lm(data1$BidPrice~data1$CouponRate)
#plot graph
eruption = rstandard(model_linear)
plot(data1$BidPrice, eruption, ylab="Standardized Residuals",xlab="Waiting Time",main="Old Faithful Eruptions")
abline(0,0)
#summary of model
summary(model_linear)
View(model_linear)
model_linear$coefficients
model_linear$coefficients[0]
typeof(model_linear$coefficients)
typeof(model_linear$coefficients)[1]
typeof(model_linear$coefficients)[2]
typeof(model_linear$coefficients).attr
model_linear$coefficients[1]
model_linear$coefficients[2]
#Test for obtained statistics :
beta0 = model_linear$coefficients[1]
View(model_linear)
beta1 = model_linear$coefficients[2]
model_linear$fitted.values
#plot graph
eruption = rstandard(model_linear$fitted.values)
sse = sum((model_linear$fitted.values - mean(data1$BidPrice))^2)
View(model_linear)
sst = sum((data1$BidPrice - mean(data1$BidPrice))^2)
ssr = sst-sse
Fscore = (ssr/sse)*33
Fscore = (sse/ssr)*33
sse = sum((model_linear$fitted.values - (data1$BidPrice))^2)
# read data from file
data1 <- read.delim("C:\\Users\\HP\\Desktop\\Data_science_for_engineers\\bonds.txt",row.names = 1)
# create model
model_linear = lm(data1$BidPrice~data1$CouponRate)
#plot graph
eruption = rstandard(model_linear$fitted.values)
plot(data1$BidPrice, eruption, ylab="Standardized Residuals",xlab="Waiting Time",main="Old Faithful Eruptions")
abline(0,0)
#summary of model
summary(model_linear)
#Test for obtained statistics :
beta0 = model_linear$coefficients[1]
beta1 = model_linear$coefficients[2]
sse = sum((model_linear$fitted.values - (data1$BidPrice))^2)
sst = sum((data1$BidPrice - mean(data1$BidPrice))^2)
ssr = sst-sse
Fscore = (sse/ssr)*33
Fscore = (ssr/sse)*(35-2)
hessian(z,c)
library(pracma)
f <- function(x) cos(x[1] + x[2])
x0 <- c(0, 0)
hessian(f, x0)
f <- function(u) {
x <- u[1]; y <- u[2]; z <- u[3]
return(x^3 + y^2 + z^2 +12*x*y + 2*z)
}
x0 <- c(1,1,1)
hessian(f, x0)
library(pracma)
f <- function(x)
cos(x[1] + x[2])
x0 <- c(0, 0)
hessian(f, x0)
f <- function(u) {
x <- u[1]; y <- u[2]; z <- u[3]
return(x^3 + y^2 + z^2 +12*x*y + 2*z)
}
x0 <- c(1,1,1)
hessian(f, x0)
#define polynomial
poly <-function (u){
x<-u[1]
y<-u[2]
z<-u[3]
return (x^2 +y^2 +z^2)
}
#define a point of evaluation , staionary point
vec <- c(2,3,4)
# evaluate hessian
hessian(poly,vec)
#define polynomial
poly <-function (u){
x<-u[1]
y<-u[2]
z<-u[3]
return (x^2 +y^2 +z^2)
}
#define a point of evaluation , staionary point
vec <- c(2,3,4)
# evaluate hessian
hessian_matrix<-hessian(poly,vec)
# test for hessian to be positive definite
x=eigen(hessian_matrix)
View(x)
View(x)
#define polynomial
poly <-function (u){
x<-u[1]
y<-u[2]
z<-u[3]
return (x^2 +y^2 +z^2)
}
#define a point of evaluation , staionary point
vec <- c(2,3,4)
# evaluate hessian
hessian_matrix<-hessian(poly,vec)
# test for hessian to be positive definite
x=eigen(hessian_matrix)
# extract components
(values <- ev$values)
## [1] 17  8  7
(vectors <- ev$vectors)
#define polynomial
poly <-function (u){
x<-u[1]
y<-u[2]
z<-u[3]
return (x^2 +y^2 +z^2)
}
#define a point of evaluation , staionary point
vec <- c(2,3,4)
# evaluate hessian
hessian_matrix<-hessian(poly,vec)
# test for hessian to be positive definite
ev=eigen(hessian_matrix)
# extract components
(values <- ev$values)
## [1] 17  8  7
(vectors <- ev$vectors)
print(i)
print(values[i])
for  ( i in lengths(values) ){
print(values[i])
}
#define polynomial
poly <-function (u){
x<-u[1]
y<-u[2]
z<-u[3]
return (x^2 +y^2 +z^2)
}
#define a point of evaluation , staionary point
vec <- c(2,3,4)
# evaluate hessian
hessian_matrix<-hessian(poly,vec)
# test for hessian to be positive definite
ev=eigen(hessian_matrix)
# extract components
(values <- ev$values)
## [1] 17  8  7
(vectors <- ev$vectors)
flag = FALSE
for  ( i in lengths(values) ){
if (values[i]>0){
flag =TRUE
}
}
if (flag==TRUE)
print("positive definite")
flag =FALSE
#define polynomial
poly <-function (u){
x<-u[1]
y<-u[2]
z<-u[3]
return (x^2 +y^2 +z^2)
}
#define a point of evaluation , staionary point
vec <- c(2,3,4)
# evaluate hessian
hessian_matrix<-hessian(poly,vec)
# test for hessian to be positive definite
ev=eigen(hessian_matrix)
# extract components
(values <- ev$values)
## [1] 17  8  7
(vectors <- ev$vectors)
flag = FALSE
for  ( i in lengths(values) ){
if (values[i]>0){
flag =TRUE
}
else
flag =FALSE
}
if (flag==TRUE)
print("positive definite")
#define polynomial
poly <-function (u){
x<-u[1]
y<-u[2]
z<-u[3]
return (x^2 +y^2 +z^2)
}
#define a point of evaluation , staionary point
vec <- c(2,3,4)
# evaluate hessian
hessian_matrix<-hessian(poly,vec)
# test for hessian to be positive definite
ev=eigen(hessian_matrix)
# extract components
(values <- ev$values)
flag = FALSE
for  ( i in lengths(values) ){
if (values[i]>0){
flag =TRUE
}
else
flag =FALSE
}
if (flag==TRUE)
print("positive definite")
#define polynomial
poly <-function (u){
x<-u[1]
y<-u[2]
z<-u[3]
return (x^2 +y^2 +z^2)
}
#define a point of evaluation , staionary point
vec <- c(2,3,4)
# evaluate hessian
hessian_matrix<-hessian(poly,vec)
# test for hessian to be positive definite
ev=eigen(hessian_matrix)
# extract components
(values <- ev$values)
flag = FALSE
for  ( i in lengths(values) ){
if (values[i]>0){
flag =TRUE
}
else
flag =FALSE
}
if (flag==TRUE)
print("positive definite")
#define polynomial
poly <-function (u){
x<-u[1]
y<-u[2]
z<-u[3]
return (x^2 +y^2 +z^2)
}
#define a point of evaluation , staionary point
vec <- c(2,3,4)
# evaluate hessian
hessian_matrix<-hessian(poly,vec)
# test for hessian to be positive definite
ev=eigen(hessian_matrix)
# extract components
(values <- ev$values)
flag = FALSE
for  ( i in lengths(values) ){
if (values[i]>0){
flag =TRUE
}
else
flag =FALSE
}
if (flag==TRUE)
print("positive definite")
setwd("E:/Learn-Git/machine_learning/R_Linear_Algebra")
#setwd("E:/Learn-Git/machine_learning/R_Linear_Algebra")
data <-c(2, 3, 3, 4, 4, 4, 5, 3, 4, 2, 1, 5, 4, 1, 2, 3, 2, 5, 3, 3, 2, 5, 5, 2, 3, 5, 5, 4, 3, 4, 5, 4, 3, 2, 1, 4, 4, 5, 1, 5, 2, 4, 3, 3, 3, 5, 2, 4, 3, 4, 2, 3, 3, 1, 3, 3, 1, 3, 1, 4, 2, 2, 3, 4,5, 1, 5, 2, 5, 3, 2, 5, 3, 5, 3, 3, 1, 2, 6, 3, 4, 4, 3, 4, 3, 3, 2, 4, 5, 5, 1, 3, 4, 2, 4, 4, 5, 3, 4, 5, 3, 3, 2, 2, 2, 2, 3, 5, 3, 4, 3, 2, 3, 5, 3, 4, 6, 2, 3, 5, 2, 4, 3, 3, 3, 4, 6, 4, 2, 4, 1, 3, 4, 4, 3, 2, 5, 5, 3, 3, 4, 6, 3, 6, 4, 3, 3, 6, 3, 3, 3, 2, 4, 3, 3, 2, 3, 4, 3, 4, 4, 3, 5, 4, 5, 4, 2, 5, 4, 3, 2, 3, 2, 1, 3, 3, 2, 2, 3, 4, 2, 4, 3, 6 , 3, 2, 2, 4, 3, 1, 6, 3, 3, 3, 4, 5, 4, 3, 3, 4, 4, 6, 4, 2, 3, 2, 3, 4, 4, 2, 2, 5,5, 2, 3, 1, 2, 4, 3, 2, 3, 4, 3, 4, 1, 3, 4, 4, 4, 4, 2, 2, 5, 1, 2, 4, 3, 2, 3, 4, 5, 3, 3, 4, 4, 3, 4, 2, 2, 3, 3, 1, 3, 2, 2, 3, 3, 6, 3, 3, 2, 3, 5, 2, 1, 4, 3, 5, 3, 4, 2, 3, 2, 4, 2, 5, 2, 4, 2, 4, 3, 2, 4, 4, 2, 2, 3, 3, 3, 5, 4, 3, 5, 3, 2, 1, 4, 1, 3, 2, 4, 4, 2, 1, 2, 4, 5, 2, 1, 2, 1, 5, 4, 5, 4, 2, 4, 3, 2, 2, 5, 1, 4, 3, 4, 5, 3, 3, 2, 3, 3, 3, 3, 4, 6, 4, 3, 2, 4, 4, 3, 2,4, 5, 4, 2, 5, 3, 3, 3, 4, 3, 2, 4, 2, 4, 4, 1, 4, 4, 1, 1, 5, 2, 3, 3, 3, 4, 2, 2, 3, 5, 2, 3, 3, 3, 4, 2, 4, 3, 4, 4, 4, 5, 3, 2, 5, 3, 3, 2, 4, 6, 3, 2, 2, 2, 2, 6, 3, 3, 4, 3, 5, 3, 6, 3, 3, 5, 2, 6, 5, 6, 4, 3, 1, 1, 4, 4, 2, 5, 4, 2, 2, 5, 2, 3, 3, 1, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 3, 5, 4, 2, 5, 5, 2, 3,5, 4, 4, 2, 3, 5, 3, 2, 1, 2, 5, 3, 3, 4, 5, 4, 1, 6, 4, 3, 4, 3, 2, 3, 5, 4, 4, 3, 2, 2, 2, 2, 2, 2, 3, 4, 1, 3, 2, 3, 3, 2, 3, 4, 4, 2, 3, 2, 5, 4, 4)
rm(ls=list())
rm(ls=list())
rm(list=ls())
#setwd("E:/Learn-Git/machine_learning/R_Linear_Algebra")
data <-c(2, 3, 3, 4, 4, 4, 5, 3, 4, 2, 1, 5, 4, 1, 2, 3, 2, 5, 3, 3, 2, 5, 5, 2, 3, 5, 5, 4, 3, 4, 5, 4, 3, 2, 1, 4, 4, 5, 1, 5, 2, 4, 3, 3, 3, 5, 2, 4, 3, 4, 2, 3, 3, 1, 3, 3, 1, 3, 1, 4, 2, 2, 3, 4,5, 1, 5, 2, 5, 3, 2, 5, 3, 5, 3, 3, 1, 2, 6, 3, 4, 4, 3, 4, 3, 3, 2, 4, 5, 5, 1, 3, 4, 2, 4, 4, 5, 3, 4, 5, 3, 3, 2, 2, 2, 2, 3, 5, 3, 4, 3, 2, 3, 5, 3, 4, 6, 2, 3, 5, 2, 4, 3, 3, 3, 4, 6, 4, 2, 4, 1, 3, 4, 4, 3, 2, 5, 5, 3, 3, 4, 6, 3, 6, 4, 3, 3, 6, 3, 3, 3, 2, 4, 3, 3, 2, 3, 4, 3, 4, 4, 3, 5, 4, 5, 4, 2, 5, 4, 3, 2, 3, 2, 1, 3, 3, 2, 2, 3, 4, 2, 4, 3, 6 , 3, 2, 2, 4, 3, 1, 6, 3, 3, 3, 4, 5, 4, 3, 3, 4, 4, 6, 4, 2, 3, 2, 3, 4, 4, 2, 2, 5,5, 2, 3, 1, 2, 4, 3, 2, 3, 4, 3, 4, 1, 3, 4, 4, 4, 4, 2, 2, 5, 1, 2, 4, 3, 2, 3, 4, 5, 3, 3, 4, 4, 3, 4, 2, 2, 3, 3, 1, 3, 2, 2, 3, 3, 6, 3, 3, 2, 3, 5, 2, 1, 4, 3, 5, 3, 4, 2, 3, 2, 4, 2, 5, 2, 4, 2, 4, 3, 2, 4, 4, 2, 2, 3, 3, 3, 5, 4, 3, 5, 3, 2, 1, 4, 1, 3, 2, 4, 4, 2, 1, 2, 4, 5, 2, 1, 2, 1, 5, 4, 5, 4, 2, 4, 3, 2, 2, 5, 1, 4, 3, 4, 5, 3, 3, 2, 3, 3, 3, 3, 4, 6, 4, 3, 2, 4, 4, 3, 2,4, 5, 4, 2, 5, 3, 3, 3, 4, 3, 2, 4, 2, 4, 4, 1, 4, 4, 1, 1, 5, 2, 3, 3, 3, 4, 2, 2, 3, 5, 2, 3, 3, 3, 4, 2, 4, 3, 4, 4, 4, 5, 3, 2, 5, 3, 3, 2, 4, 6, 3, 2, 2, 2, 2, 6, 3, 3, 4, 3, 5, 3, 6, 3, 3, 5, 2, 6, 5, 6, 4, 3, 1, 1, 4, 4, 2, 5, 4, 2, 2, 5, 2, 3, 3, 1, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 3, 5, 4, 2, 5, 5, 2, 3,5, 4, 4, 2, 3, 5, 3, 2, 1, 2, 5, 3, 3, 4, 5, 4, 1, 6, 4, 3, 4, 3, 2, 3, 5, 4, 4, 3, 2, 2, 2, 2, 2, 2, 3, 4, 1, 3, 2, 3, 3, 2, 3, 4, 4, 2, 3, 2, 5, 4, 4)
barplot(table(data))
barplot(table(data)/length(data))
barplot(table(food), main = "Variety of Fish Food", names.arg=c(Food 1, Food 2, Food 3, Food 4, Food 5, Food 6), xlab="Fish Foods", ylab="Number of fishes")
barplot(table(food), main = "Food for Patients", names.arg=c("Food 1", "Food 2", "Food 3", "Food 4", "Food 5", "Food 6"), ylab="Fish Foods", xlab="Number of fishes")
#setwd("E:/Learn-Git/machine_learning/R_Linear_Algebra")
food <-c(2, 3, 3, 4, 4, 4, 5, 3, 4, 2, 1, 5, 4, 1, 2, 3, 2, 5, 3, 3, 2, 5, 5, 2, 3, 5, 5, 4, 3, 4, 5, 4, 3, 2, 1, 4, 4, 5, 1, 5, 2, 4, 3, 3, 3, 5, 2, 4, 3, 4, 2, 3, 3, 1, 3, 3, 1, 3, 1, 4, 2, 2, 3, 4,5, 1, 5, 2, 5, 3, 2, 5, 3, 5, 3, 3, 1, 2, 6, 3, 4, 4, 3, 4, 3, 3, 2, 4, 5, 5, 1, 3, 4, 2, 4, 4, 5, 3, 4, 5, 3, 3, 2, 2, 2, 2, 3, 5, 3, 4, 3, 2, 3, 5, 3, 4, 6, 2, 3, 5, 2, 4, 3, 3, 3, 4, 6, 4, 2, 4, 1, 3, 4, 4, 3, 2, 5, 5, 3, 3, 4, 6, 3, 6, 4, 3, 3, 6, 3, 3, 3, 2, 4, 3, 3, 2, 3, 4, 3, 4, 4, 3, 5, 4, 5, 4, 2, 5, 4, 3, 2, 3, 2, 1, 3, 3, 2, 2, 3, 4, 2, 4, 3, 6 , 3, 2, 2, 4, 3, 1, 6, 3, 3, 3, 4, 5, 4, 3, 3, 4, 4, 6, 4, 2, 3, 2, 3, 4, 4, 2, 2, 5,5, 2, 3, 1, 2, 4, 3, 2, 3, 4, 3, 4, 1, 3, 4, 4, 4, 4, 2, 2, 5, 1, 2, 4, 3, 2, 3, 4, 5, 3, 3, 4, 4, 3, 4, 2, 2, 3, 3, 1, 3, 2, 2, 3, 3, 6, 3, 3, 2, 3, 5, 2, 1, 4, 3, 5, 3, 4, 2, 3, 2, 4, 2, 5, 2, 4, 2, 4, 3, 2, 4, 4, 2, 2, 3, 3, 3, 5, 4, 3, 5, 3, 2, 1, 4, 1, 3, 2, 4, 4, 2, 1, 2, 4, 5, 2, 1, 2, 1, 5, 4, 5, 4, 2, 4, 3, 2, 2, 5, 1, 4, 3, 4, 5, 3, 3, 2, 3, 3, 3, 3, 4, 6, 4, 3, 2, 4, 4, 3, 2,4, 5, 4, 2, 5, 3, 3, 3, 4, 3, 2, 4, 2, 4, 4, 1, 4, 4, 1, 1, 5, 2, 3, 3, 3, 4, 2, 2, 3, 5, 2, 3, 3, 3, 4, 2, 4, 3, 4, 4, 4, 5, 3, 2, 5, 3, 3, 2, 4, 6, 3, 2, 2, 2, 2, 6, 3, 3, 4, 3, 5, 3, 6, 3, 3, 5, 2, 6, 5, 6, 4, 3, 1, 1, 4, 4, 2, 5, 4, 2, 2, 5, 2, 3, 3, 1, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 3, 5, 4, 2, 5, 5, 2, 3,5, 4, 4, 2, 3, 5, 3, 2, 1, 2, 5, 3, 3, 4, 5, 4, 1, 6, 4, 3, 4, 3, 2, 3, 5, 4, 4, 3, 2, 2, 2, 2, 2, 2, 3, 4, 1, 3, 2, 3, 3, 2, 3, 4, 4, 2, 3, 2, 5, 4, 4)
barplot(table(food)/length(food))
barplot(table(food), main = "Food for Patients", names.arg=c("Food 1", "Food 2", "Food 3", "Food 4", "Food 5", "Food 6"), ylab="Fish Foods", xlab="Number of fishes")
#setwd("E:/Learn-Git/machine_learning/R_Linear_Algebra")
food <-c(2, 3, 3, 4, 4, 4, 5, 3, 4, 2, 1, 5, 4, 1, 2, 3, 2, 5, 3, 3, 2, 5, 5, 2, 3, 5, 5, 4, 3, 4, 5, 4, 3, 2, 1, 4, 4, 5, 1, 5, 2, 4, 3, 3, 3, 5, 2, 4, 3, 4, 2, 3, 3, 1, 3, 3, 1, 3, 1, 4, 2, 2, 3, 4,5, 1, 5, 2, 5, 3, 2, 5, 3, 5, 3, 3, 1, 2, 6, 3, 4, 4, 3, 4, 3, 3, 2, 4, 5, 5, 1, 3, 4, 2, 4, 4, 5, 3, 4, 5, 3, 3, 2, 2, 2, 2, 3, 5, 3, 4, 3, 2, 3, 5, 3, 4, 6, 2, 3, 5, 2, 4, 3, 3, 3, 4, 6, 4, 2, 4, 1, 3, 4, 4, 3, 2, 5, 5, 3, 3, 4, 6, 3, 6, 4, 3, 3, 6, 3, 3, 3, 2, 4, 3, 3, 2, 3, 4, 3, 4, 4, 3, 5, 4, 5, 4, 2, 5, 4, 3, 2, 3, 2, 1, 3, 3, 2, 2, 3, 4, 2, 4, 3, 6 , 3, 2, 2, 4, 3, 1, 6, 3, 3, 3, 4, 5, 4, 3, 3, 4, 4, 6, 4, 2, 3, 2, 3, 4, 4, 2, 2, 5,5, 2, 3, 1, 2, 4, 3, 2, 3, 4, 3, 4, 1, 3, 4, 4, 4, 4, 2, 2, 5, 1, 2, 4, 3, 2, 3, 4, 5, 3, 3, 4, 4, 3, 4, 2, 2, 3, 3, 1, 3, 2, 2, 3, 3, 6, 3, 3, 2, 3, 5, 2, 1, 4, 3, 5, 3, 4, 2, 3, 2, 4, 2, 5, 2, 4, 2, 4, 3, 2, 4, 4, 2, 2, 3, 3, 3, 5, 4, 3, 5, 3, 2, 1, 4, 1, 3, 2, 4, 4, 2, 1, 2, 4, 5, 2, 1, 2, 1, 5, 4, 5, 4, 2, 4, 3, 2, 2, 5, 1, 4, 3, 4, 5, 3, 3, 2, 3, 3, 3, 3, 4, 6, 4, 3, 2, 4, 4, 3, 2,4, 5, 4, 2, 5, 3, 3, 3, 4, 3, 2, 4, 2, 4, 4, 1, 4, 4, 1, 1, 5, 2, 3, 3, 3, 4, 2, 2, 3, 5, 2, 3, 3, 3, 4, 2, 4, 3, 4, 4, 4, 5, 3, 2, 5, 3, 3, 2, 4, 6, 3, 2, 2, 2, 2, 6, 3, 3, 4, 3, 5, 3, 6, 3, 3, 5, 2, 6, 5, 6, 4, 3, 1, 1, 4, 4, 2, 5, 4, 2, 2, 5, 2, 3, 3, 1, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 3, 5, 4, 2, 5, 5, 2, 3,5, 4, 4, 2, 3, 5, 3, 2, 1, 2, 5, 3, 3, 4, 5, 4, 1, 6, 4, 3, 4, 3, 2, 3, 5, 4, 4, 3, 2, 2, 2, 2, 2, 2, 3, 4, 1, 3, 2, 3, 3, 2, 3, 4, 4, 2, 3, 2, 5, 4, 4)
barplot(table(food)/length(food))
barplot(table(food), main = "Food for Patients", names.arg=c("Food 1", "Food 2", "Food 3", "Food 4", "Food 5", "Food 6"), ylab="Fish Foods", xlab="Number of fishes")
barplot(table(food), main = "Variety of Fish Food", names.arg=c("Food 1", "Food 2", "Food 3", "Food 4", "Food 5", "Food 6"), xlab="Fish Foods", ylab="Number of fishes")
#setwd("E:/Learn-Git/machine_learning/R_Linear_Algebra")
food <-c(2, 3, 3, 4, 4, 4, 5, 3, 4, 2, 1, 5, 4, 1, 2, 3, 2, 5, 3, 3, 2, 5, 5, 2, 3, 5, 5, 4, 3, 4, 5, 4, 3, 2, 1, 4, 4, 5, 1, 5, 2, 4, 3, 3, 3, 5, 2, 4, 3, 4, 2, 3, 3, 1, 3, 3, 1, 3, 1, 4, 2, 2, 3, 4,5, 1, 5, 2, 5, 3, 2, 5, 3, 5, 3, 3, 1, 2, 6, 3, 4, 4, 3, 4, 3, 3, 2, 4, 5, 5, 1, 3, 4, 2, 4, 4, 5, 3, 4, 5, 3, 3, 2, 2, 2, 2, 3, 5, 3, 4, 3, 2, 3, 5, 3, 4, 6, 2, 3, 5, 2, 4, 3, 3, 3, 4, 6, 4, 2, 4, 1, 3, 4, 4, 3, 2, 5, 5, 3, 3, 4, 6, 3, 6, 4, 3, 3, 6, 3, 3, 3, 2, 4, 3, 3, 2, 3, 4, 3, 4, 4, 3, 5, 4, 5, 4, 2, 5, 4, 3, 2, 3, 2, 1, 3, 3, 2, 2, 3, 4, 2, 4, 3, 6 , 3, 2, 2, 4, 3, 1, 6, 3, 3, 3, 4, 5, 4, 3, 3, 4, 4, 6, 4, 2, 3, 2, 3, 4, 4, 2, 2, 5,5, 2, 3, 1, 2, 4, 3, 2, 3, 4, 3, 4, 1, 3, 4, 4, 4, 4, 2, 2, 5, 1, 2, 4, 3, 2, 3, 4, 5, 3, 3, 4, 4, 3, 4, 2, 2, 3, 3, 1, 3, 2, 2, 3, 3, 6, 3, 3, 2, 3, 5, 2, 1, 4, 3, 5, 3, 4, 2, 3, 2, 4, 2, 5, 2, 4, 2, 4, 3, 2, 4, 4, 2, 2, 3, 3, 3, 5, 4, 3, 5, 3, 2, 1, 4, 1, 3, 2, 4, 4, 2, 1, 2, 4, 5, 2, 1, 2, 1, 5, 4, 5, 4, 2, 4, 3, 2, 2, 5, 1, 4, 3, 4, 5, 3, 3, 2, 3, 3, 3, 3, 4, 6, 4, 3, 2, 4, 4, 3, 2,4, 5, 4, 2, 5, 3, 3, 3, 4, 3, 2, 4, 2, 4, 4, 1, 4, 4, 1, 1, 5, 2, 3, 3, 3, 4, 2, 2, 3, 5, 2, 3, 3, 3, 4, 2, 4, 3, 4, 4, 4, 5, 3, 2, 5, 3, 3, 2, 4, 6, 3, 2, 2, 2, 2, 6, 3, 3, 4, 3, 5, 3, 6, 3, 3, 5, 2, 6, 5, 6, 4, 3, 1, 1, 4, 4, 2, 5, 4, 2, 2, 5, 2, 3, 3, 1, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 3, 5, 4, 2, 5, 5, 2, 3,5, 4, 4, 2, 3, 5, 3, 2, 1, 2, 5, 3, 3, 4, 5, 4, 1, 6, 4, 3, 4, 3, 2, 3, 5, 4, 4, 3, 2, 2, 2, 2, 2, 2, 3, 4, 1, 3, 2, 3, 3, 2, 3, 4, 4, 2, 3, 2, 5, 4, 4)
barplot(table(food)/length(food))
barplot(table(food), main = "Food for Patients", names.arg=c("Food 1", "Food 2", "Food 3", "Food 4", "Food 5", "Food 6"), ylab="Fish Foods", xlab="Number of fishes")
barplot(table(food), main = "Variety of Fish Food", names.arg=c("Food 1", "Food 2", "Food 3", "Food 4", "Food 5", "Food 6"), xlab="Fish Foods", ylab="Number of fishes") barplot(table(food), main = "Variety of Fish Food", names.arg=c("Food 1", "Food 2", "Food 3", "Food 4", "Food 5", "Food 6"), xlab="Fish Foods", ylab="Number of fishes", col=c("red", "green", "orange", "pink", "cyan", "blue"))
barplot(table(food), main = "Variety of Fish Food", names.arg=c("Food 1", "Food 2", "Food 3", "Food 4", "Food 5", "Food 6"), xlab="Fish Foods", ylab="Number of fishes") barplot(table(food), main = "Variety of Fish Food", names.arg=c("Food 1", "Food 2", "Food 3", "Food 4", "Food 5", "Food 6"), xlab="Fish Foods", ylab="Number of fishes", col=c("red", "green", "orange", "pink", "cyan", "blue"))
barplot(table(food), main = "Variety of Fish Food", names.arg=c("Food 1", "Food 2", "Food 3", "Food 4", "Food 5", "Food 6"), xlab="Fish Foods", ylab="Number of fishes", col=c("red", "green", "orange", "pink", "cyan", "blue"))
piechart(table(food))
pie(table(food))
pie(table(food), main = "Variety of Fish Food", names.arg=c("Food 1", "Food 2", "Food 3", "Food 4", "Food 5", "Food 6"), col=c("red", "green", "orange", "pink", "cyan", "blue"))
pie3D(table(food), main = "Variety of Fish Food", names.arg=c("Food 1", "Food 2", "Food 3", "Food 4", "Food 5", "Food 6"), col=c("red", "green", "orange", "pink", "cyan", "blue"))
pie3D(table(food), main = "Variety of Fish Food", labels=c("Food 1", "Food 2", "Food 3", "Food 4", "Food 5", "Food 6"),  col=c("red", "green", "orange", "pink", "cyan", "blue"))
pie3D(food, main = "Variety of Fish Food", labels =c("Food 1", "Food 2", "Food 3", "Food 4", "Food 5", "Food 6"), col=c("red", "green", "orange", "pink", "cyan", "blue"))
pie3D(food, main = "Variety of Fish Food", labels =c("Food 1", "Food 2", "Food 3", "Food 4", "Food 5", "Food 6"), col=c("red", "green", "orange", "pink", "cyan", "blue"))
pie3D(table(food), main = "Variety of Fish Food", labels =c("Food 1", "Food 2", "Food 3", "Food 4", "Food 5", "Food 6"), col=c("red", "green", "orange", "pink", "cyan", "blue"))
pie3D(table(food), main = "Variety of Fish Food", names.arg=c("Food 1", "Food 2", "Food 3", "Food 4", "Food 5", "Food 6"), col=c("red", "green", "orange", "pink", "cyan", "blue"
pie3D(table(food), main = "Variety of Fish Food", names.arg=c("Food 1", "Food 2", "Food 3", "Food 4", "Food 5", "Food 6"), col=c("red", "green", "orange", "pink", "cyan", "blue"))
pie3D(table(food), main = "Variety of Fish Food", names.arg=c("Food 1", "Food 2", "Food 3", "Food 4", "Food 5", "Food 6"), col=c("red", "green", "orange", "pink", "cyan", "blue"))
library(plotrix)
install.packages("plotrix")
food <-c(2, 3, 3, 4, 4, 4, 5, 3, 4, 2, 1, 5, 4, 1, 2, 3, 2, 5, 3, 3, 2, 5, 5, 2, 3, 5, 5, 4, 3, 4, 5, 4, 3, 2, 1, 4, 4, 5, 1, 5, 2, 4, 3, 3, 3, 5, 2, 4, 3, 4, 2, 3, 3, 1, 3, 3, 1, 3, 1, 4, 2, 2, 3, 4,5, 1, 5, 2, 5, 3, 2, 5, 3, 5, 3, 3, 1, 2, 6, 3, 4, 4, 3, 4, 3, 3, 2, 4, 5, 5, 1, 3, 4, 2, 4, 4, 5, 3, 4, 5, 3, 3, 2, 2, 2, 2, 3, 5, 3, 4, 3, 2, 3, 5, 3, 4, 6, 2, 3, 5, 2, 4, 3, 3, 3, 4, 6, 4, 2, 4, 1, 3, 4, 4, 3, 2, 5, 5, 3, 3, 4, 6, 3, 6, 4, 3, 3, 6, 3, 3, 3, 2, 4, 3, 3, 2, 3, 4, 3, 4, 4, 3, 5, 4, 5, 4, 2, 5, 4, 3, 2, 3, 2, 1, 3, 3, 2, 2, 3, 4, 2, 4, 3, 6 , 3, 2, 2, 4, 3, 1, 6, 3, 3, 3, 4, 5, 4, 3, 3, 4, 4, 6, 4, 2, 3, 2, 3, 4, 4, 2, 2, 5,5, 2, 3, 1, 2, 4, 3, 2, 3, 4, 3, 4, 1, 3, 4, 4, 4, 4, 2, 2, 5, 1, 2, 4, 3, 2, 3, 4, 5, 3, 3, 4, 4, 3, 4, 2, 2, 3, 3, 1, 3, 2, 2, 3, 3, 6, 3, 3, 2, 3, 5, 2, 1, 4, 3, 5, 3, 4, 2, 3, 2, 4, 2, 5, 2, 4, 2, 4, 3, 2, 4, 4, 2, 2, 3, 3, 3, 5, 4, 3, 5, 3, 2, 1, 4, 1, 3, 2, 4, 4, 2, 1, 2, 4, 5, 2, 1, 2, 1, 5, 4, 5, 4, 2, 4, 3, 2, 2, 5, 1, 4, 3, 4, 5, 3, 3, 2, 3, 3, 3, 3, 4, 6, 4, 3, 2, 4, 4, 3, 2,4, 5, 4, 2, 5, 3, 3, 3, 4, 3, 2, 4, 2, 4, 4, 1, 4, 4, 1, 1, 5, 2, 3, 3, 3, 4, 2, 2, 3, 5, 2, 3, 3, 3, 4, 2, 4, 3, 4, 4, 4, 5, 3, 2, 5, 3, 3, 2, 4, 6, 3, 2, 2, 2, 2, 6, 3, 3, 4, 3, 5, 3, 6, 3, 3, 5, 2, 6, 5, 6, 4, 3, 1, 1, 4, 4, 2, 5, 4, 2, 2, 5, 2, 3, 3, 1, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 3, 5, 4, 2, 5, 5, 2, 3,5, 4, 4, 2, 3, 5, 3, 2, 1, 2, 5, 3, 3, 4, 5, 4, 1, 6, 4, 3, 4, 3, 2, 3, 5, 4, 4, 3, 2, 2, 2, 2, 2, 2, 3, 4, 1, 3, 2, 3, 3, 2, 3, 4, 4, 2, 3, 2, 5, 4, 4)
#setwd("E:/Learn-Git/machine_learning/R_Linear_Algebra")
install.packages("plotrix")
food <-c(2, 3, 3, 4, 4, 4, 5, 3, 4, 2, 1, 5, 4, 1, 2, 3, 2, 5, 3, 3, 2, 5, 5, 2, 3, 5, 5, 4, 3, 4, 5, 4, 3, 2, 1, 4, 4, 5, 1, 5, 2, 4, 3, 3, 3, 5, 2, 4, 3, 4, 2, 3, 3, 1, 3, 3, 1, 3, 1, 4, 2, 2, 3, 4,5, 1, 5, 2, 5, 3, 2, 5, 3, 5, 3, 3, 1, 2, 6, 3, 4, 4, 3, 4, 3, 3, 2, 4, 5, 5, 1, 3, 4, 2, 4, 4, 5, 3, 4, 5, 3, 3, 2, 2, 2, 2, 3, 5, 3, 4, 3, 2, 3, 5, 3, 4, 6, 2, 3, 5, 2, 4, 3, 3, 3, 4, 6, 4, 2, 4, 1, 3, 4, 4, 3, 2, 5, 5, 3, 3, 4, 6, 3, 6, 4, 3, 3, 6, 3, 3, 3, 2, 4, 3, 3, 2, 3, 4, 3, 4, 4, 3, 5, 4, 5, 4, 2, 5, 4, 3, 2, 3, 2, 1, 3, 3, 2, 2, 3, 4, 2, 4, 3, 6 , 3, 2, 2, 4, 3, 1, 6, 3, 3, 3, 4, 5, 4, 3, 3, 4, 4, 6, 4, 2, 3, 2, 3, 4, 4, 2, 2, 5,5, 2, 3, 1, 2, 4, 3, 2, 3, 4, 3, 4, 1, 3, 4, 4, 4, 4, 2, 2, 5, 1, 2, 4, 3, 2, 3, 4, 5, 3, 3, 4, 4, 3, 4, 2, 2, 3, 3, 1, 3, 2, 2, 3, 3, 6, 3, 3, 2, 3, 5, 2, 1, 4, 3, 5, 3, 4, 2, 3, 2, 4, 2, 5, 2, 4, 2, 4, 3, 2, 4, 4, 2, 2, 3, 3, 3, 5, 4, 3, 5, 3, 2, 1, 4, 1, 3, 2, 4, 4, 2, 1, 2, 4, 5, 2, 1, 2, 1, 5, 4, 5, 4, 2, 4, 3, 2, 2, 5, 1, 4, 3, 4, 5, 3, 3, 2, 3, 3, 3, 3, 4, 6, 4, 3, 2, 4, 4, 3, 2,4, 5, 4, 2, 5, 3, 3, 3, 4, 3, 2, 4, 2, 4, 4, 1, 4, 4, 1, 1, 5, 2, 3, 3, 3, 4, 2, 2, 3, 5, 2, 3, 3, 3, 4, 2, 4, 3, 4, 4, 4, 5, 3, 2, 5, 3, 3, 2, 4, 6, 3, 2, 2, 2, 2, 6, 3, 3, 4, 3, 5, 3, 6, 3, 3, 5, 2, 6, 5, 6, 4, 3, 1, 1, 4, 4, 2, 5, 4, 2, 2, 5, 2, 3, 3, 1, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 3, 5, 4, 2, 5, 5, 2, 3,5, 4, 4, 2, 3, 5, 3, 2, 1, 2, 5, 3, 3, 4, 5, 4, 1, 6, 4, 3, 4, 3, 2, 3, 5, 4, 4, 3, 2, 2, 2, 2, 2, 2, 3, 4, 1, 3, 2, 3, 3, 2, 3, 4, 4, 2, 3, 2, 5, 4, 4)
pie3D(table(food), main = "Variety of Fish Food", names.arg=c("Food 1", "Food 2", "Food 3", "Food 4", "Food 5", "Food 6"), col=c("red", "green", "orange", "pink", "cyan", "blue"))
#install.packages("plotrix")
food <-c(2, 3, 3, 4, 4, 4, 5, 3, 4, 2, 1, 5, 4, 1, 2, 3, 2, 5, 3, 3, 2, 5, 5, 2, 3, 5, 5, 4, 3, 4, 5, 4, 3, 2, 1, 4, 4, 5, 1, 5, 2, 4, 3, 3, 3, 5, 2, 4, 3, 4, 2, 3, 3, 1, 3, 3, 1, 3, 1, 4, 2, 2, 3, 4,5, 1, 5, 2, 5, 3, 2, 5, 3, 5, 3, 3, 1, 2, 6, 3, 4, 4, 3, 4, 3, 3, 2, 4, 5, 5, 1, 3, 4, 2, 4, 4, 5, 3, 4, 5, 3, 3, 2, 2, 2, 2, 3, 5, 3, 4, 3, 2, 3, 5, 3, 4, 6, 2, 3, 5, 2, 4, 3, 3, 3, 4, 6, 4, 2, 4, 1, 3, 4, 4, 3, 2, 5, 5, 3, 3, 4, 6, 3, 6, 4, 3, 3, 6, 3, 3, 3, 2, 4, 3, 3, 2, 3, 4, 3, 4, 4, 3, 5, 4, 5, 4, 2, 5, 4, 3, 2, 3, 2, 1, 3, 3, 2, 2, 3, 4, 2, 4, 3, 6 , 3, 2, 2, 4, 3, 1, 6, 3, 3, 3, 4, 5, 4, 3, 3, 4, 4, 6, 4, 2, 3, 2, 3, 4, 4, 2, 2, 5,5, 2, 3, 1, 2, 4, 3, 2, 3, 4, 3, 4, 1, 3, 4, 4, 4, 4, 2, 2, 5, 1, 2, 4, 3, 2, 3, 4, 5, 3, 3, 4, 4, 3, 4, 2, 2, 3, 3, 1, 3, 2, 2, 3, 3, 6, 3, 3, 2, 3, 5, 2, 1, 4, 3, 5, 3, 4, 2, 3, 2, 4, 2, 5, 2, 4, 2, 4, 3, 2, 4, 4, 2, 2, 3, 3, 3, 5, 4, 3, 5, 3, 2, 1, 4, 1, 3, 2, 4, 4, 2, 1, 2, 4, 5, 2, 1, 2, 1, 5, 4, 5, 4, 2, 4, 3, 2, 2, 5, 1, 4, 3, 4, 5, 3, 3, 2, 3, 3, 3, 3, 4, 6, 4, 3, 2, 4, 4, 3, 2,4, 5, 4, 2, 5, 3, 3, 3, 4, 3, 2, 4, 2, 4, 4, 1, 4, 4, 1, 1, 5, 2, 3, 3, 3, 4, 2, 2, 3, 5, 2, 3, 3, 3, 4, 2, 4, 3, 4, 4, 4, 5, 3, 2, 5, 3, 3, 2, 4, 6, 3, 2, 2, 2, 2, 6, 3, 3, 4, 3, 5, 3, 6, 3, 3, 5, 2, 6, 5, 6, 4, 3, 1, 1, 4, 4, 2, 5, 4, 2, 2, 5, 2, 3, 3, 1, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 3, 5, 4, 2, 5, 5, 2, 3,5, 4, 4, 2, 3, 5, 3, 2, 1, 2, 5, 3, 3, 4, 5, 4, 1, 6, 4, 3, 4, 3, 2, 3, 5, 4, 4, 3, 2, 2, 2, 2, 2, 2, 3, 4, 1, 3, 2, 3, 3, 2, 3, 4, 4, 2, 3, 2, 5, 4, 4)
#setwd("E:/Learn-Git/machine_learning/R_Linear_Algebra")
#install.packages("plotrix")
food <-c(2, 3, 3, 4, 4, 4, 5, 3, 4, 2, 1, 5, 4, 1, 2, 3, 2, 5, 3, 3, 2, 5, 5, 2, 3, 5, 5, 4, 3, 4, 5, 4, 3, 2, 1, 4, 4, 5, 1, 5, 2, 4, 3, 3, 3, 5, 2, 4, 3, 4, 2, 3, 3, 1, 3, 3, 1, 3, 1, 4, 2, 2, 3, 4,5, 1, 5, 2, 5, 3, 2, 5, 3, 5, 3, 3, 1, 2, 6, 3, 4, 4, 3, 4, 3, 3, 2, 4, 5, 5, 1, 3, 4, 2, 4, 4, 5, 3, 4, 5, 3, 3, 2, 2, 2, 2, 3, 5, 3, 4, 3, 2, 3, 5, 3, 4, 6, 2, 3, 5, 2, 4, 3, 3, 3, 4, 6, 4, 2, 4, 1, 3, 4, 4, 3, 2, 5, 5, 3, 3, 4, 6, 3, 6, 4, 3, 3, 6, 3, 3, 3, 2, 4, 3, 3, 2, 3, 4, 3, 4, 4, 3, 5, 4, 5, 4, 2, 5, 4, 3, 2, 3, 2, 1, 3, 3, 2, 2, 3, 4, 2, 4, 3, 6 , 3, 2, 2, 4, 3, 1, 6, 3, 3, 3, 4, 5, 4, 3, 3, 4, 4, 6, 4, 2, 3, 2, 3, 4, 4, 2, 2, 5,5, 2, 3, 1, 2, 4, 3, 2, 3, 4, 3, 4, 1, 3, 4, 4, 4, 4, 2, 2, 5, 1, 2, 4, 3, 2, 3, 4, 5, 3, 3, 4, 4, 3, 4, 2, 2, 3, 3, 1, 3, 2, 2, 3, 3, 6, 3, 3, 2, 3, 5, 2, 1, 4, 3, 5, 3, 4, 2, 3, 2, 4, 2, 5, 2, 4, 2, 4, 3, 2, 4, 4, 2, 2, 3, 3, 3, 5, 4, 3, 5, 3, 2, 1, 4, 1, 3, 2, 4, 4, 2, 1, 2, 4, 5, 2, 1, 2, 1, 5, 4, 5, 4, 2, 4, 3, 2, 2, 5, 1, 4, 3, 4, 5, 3, 3, 2, 3, 3, 3, 3, 4, 6, 4, 3, 2, 4, 4, 3, 2,4, 5, 4, 2, 5, 3, 3, 3, 4, 3, 2, 4, 2, 4, 4, 1, 4, 4, 1, 1, 5, 2, 3, 3, 3, 4, 2, 2, 3, 5, 2, 3, 3, 3, 4, 2, 4, 3, 4, 4, 4, 5, 3, 2, 5, 3, 3, 2, 4, 6, 3, 2, 2, 2, 2, 6, 3, 3, 4, 3, 5, 3, 6, 3, 3, 5, 2, 6, 5, 6, 4, 3, 1, 1, 4, 4, 2, 5, 4, 2, 2, 5, 2, 3, 3, 1, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 3, 5, 4, 2, 5, 5, 2, 3,5, 4, 4, 2, 3, 5, 3, 2, 1, 2, 5, 3, 3, 4, 5, 4, 1, 6, 4, 3, 4, 3, 2, 3, 5, 4, 4, 3, 2, 2, 2, 2, 2, 2, 3, 4, 1, 3, 2, 3, 3, 2, 3, 4, 4, 2, 3, 2, 5, 4, 4)
pie3D(table(food), main = "Variety of Fish Food", names.arg=c("Food 1", "Food 2", "Food 3", "Food 4", "Food 5", "Food 6"), col=c("red", "green", "orange", "pink", "cyan", "blue"))
#install.packages("plotrix")
library(plotrix)
#setwd("E:/Learn-Git/machine_learning/R_Linear_Algebra")
#install.packages("plotrix")
library(plotrix)
food <-c(2, 3, 3, 4, 4, 4, 5, 3, 4, 2, 1, 5, 4, 1, 2, 3, 2, 5, 3, 3, 2, 5, 5, 2, 3, 5, 5, 4, 3, 4, 5, 4, 3, 2, 1, 4, 4, 5, 1, 5, 2, 4, 3, 3, 3, 5, 2, 4, 3, 4, 2, 3, 3, 1, 3, 3, 1, 3, 1, 4, 2, 2, 3, 4,5, 1, 5, 2, 5, 3, 2, 5, 3, 5, 3, 3, 1, 2, 6, 3, 4, 4, 3, 4, 3, 3, 2, 4, 5, 5, 1, 3, 4, 2, 4, 4, 5, 3, 4, 5, 3, 3, 2, 2, 2, 2, 3, 5, 3, 4, 3, 2, 3, 5, 3, 4, 6, 2, 3, 5, 2, 4, 3, 3, 3, 4, 6, 4, 2, 4, 1, 3, 4, 4, 3, 2, 5, 5, 3, 3, 4, 6, 3, 6, 4, 3, 3, 6, 3, 3, 3, 2, 4, 3, 3, 2, 3, 4, 3, 4, 4, 3, 5, 4, 5, 4, 2, 5, 4, 3, 2, 3, 2, 1, 3, 3, 2, 2, 3, 4, 2, 4, 3, 6 , 3, 2, 2, 4, 3, 1, 6, 3, 3, 3, 4, 5, 4, 3, 3, 4, 4, 6, 4, 2, 3, 2, 3, 4, 4, 2, 2, 5,5, 2, 3, 1, 2, 4, 3, 2, 3, 4, 3, 4, 1, 3, 4, 4, 4, 4, 2, 2, 5, 1, 2, 4, 3, 2, 3, 4, 5, 3, 3, 4, 4, 3, 4, 2, 2, 3, 3, 1, 3, 2, 2, 3, 3, 6, 3, 3, 2, 3, 5, 2, 1, 4, 3, 5, 3, 4, 2, 3, 2, 4, 2, 5, 2, 4, 2, 4, 3, 2, 4, 4, 2, 2, 3, 3, 3, 5, 4, 3, 5, 3, 2, 1, 4, 1, 3, 2, 4, 4, 2, 1, 2, 4, 5, 2, 1, 2, 1, 5, 4, 5, 4, 2, 4, 3, 2, 2, 5, 1, 4, 3, 4, 5, 3, 3, 2, 3, 3, 3, 3, 4, 6, 4, 3, 2, 4, 4, 3, 2,4, 5, 4, 2, 5, 3, 3, 3, 4, 3, 2, 4, 2, 4, 4, 1, 4, 4, 1, 1, 5, 2, 3, 3, 3, 4, 2, 2, 3, 5, 2, 3, 3, 3, 4, 2, 4, 3, 4, 4, 4, 5, 3, 2, 5, 3, 3, 2, 4, 6, 3, 2, 2, 2, 2, 6, 3, 3, 4, 3, 5, 3, 6, 3, 3, 5, 2, 6, 5, 6, 4, 3, 1, 1, 4, 4, 2, 5, 4, 2, 2, 5, 2, 3, 3, 1, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 3, 5, 4, 2, 5, 5, 2, 3,5, 4, 4, 2, 3, 5, 3, 2, 1, 2, 5, 3, 3, 4, 5, 4, 1, 6, 4, 3, 4, 3, 2, 3, 5, 4, 4, 3, 2, 2, 2, 2, 2, 2, 3, 4, 1, 3, 2, 3, 3, 2, 3, 4, 4, 2, 3, 2, 5, 4, 4)
pie3D(table(food), main = "Variety of Fish Food", names.arg=c("Food 1", "Food 2", "Food 3", "Food 4", "Food 5", "Food 6"), col=c("red", "green", "orange", "pink", "cyan", "blue"))
pie3D(food, main = "Variety of Fish Food", labels =c("Food 1", "Food 2", "Food 3", "Food 4", "Food 5", "Food 6"), col=c("red", "green", "orange", "pink", "cyan", "blue"))
rm(list=ls())
#setwd("E:/Learn-Git/machine_learning/R_Linear_Algebra")
#install.packages("plotrix")
library(plotrix)
food <-c(2, 3, 3, 4, 4, 4, 5, 3, 4, 2, 1, 5, 4, 1, 2, 3, 2, 5, 3, 3, 2, 5, 5, 2, 3, 5, 5, 4, 3, 4, 5, 4, 3, 2, 1, 4, 4, 5, 1, 5, 2, 4, 3, 3, 3, 5, 2, 4, 3, 4, 2, 3, 3, 1, 3, 3, 1, 3, 1, 4, 2, 2, 3, 4,5, 1, 5, 2, 5, 3, 2, 5, 3, 5, 3, 3, 1, 2, 6, 3, 4, 4, 3, 4, 3, 3, 2, 4, 5, 5, 1, 3, 4, 2, 4, 4, 5, 3, 4, 5, 3, 3, 2, 2, 2, 2, 3, 5, 3, 4, 3, 2, 3, 5, 3, 4, 6, 2, 3, 5, 2, 4, 3, 3, 3, 4, 6, 4, 2, 4, 1, 3, 4, 4, 3, 2, 5, 5, 3, 3, 4, 6, 3, 6, 4, 3, 3, 6, 3, 3, 3, 2, 4, 3, 3, 2, 3, 4, 3, 4, 4, 3, 5, 4, 5, 4, 2, 5, 4, 3, 2, 3, 2, 1, 3, 3, 2, 2, 3, 4, 2, 4, 3, 6 , 3, 2, 2, 4, 3, 1, 6, 3, 3, 3, 4, 5, 4, 3, 3, 4, 4, 6, 4, 2, 3, 2, 3, 4, 4, 2, 2, 5,5, 2, 3, 1, 2, 4, 3, 2, 3, 4, 3, 4, 1, 3, 4, 4, 4, 4, 2, 2, 5, 1, 2, 4, 3, 2, 3, 4, 5, 3, 3, 4, 4, 3, 4, 2, 2, 3, 3, 1, 3, 2, 2, 3, 3, 6, 3, 3, 2, 3, 5, 2, 1, 4, 3, 5, 3, 4, 2, 3, 2, 4, 2, 5, 2, 4, 2, 4, 3, 2, 4, 4, 2, 2, 3, 3, 3, 5, 4, 3, 5, 3, 2, 1, 4, 1, 3, 2, 4, 4, 2, 1, 2, 4, 5, 2, 1, 2, 1, 5, 4, 5, 4, 2, 4, 3, 2, 2, 5, 1, 4, 3, 4, 5, 3, 3, 2, 3, 3, 3, 3, 4, 6, 4, 3, 2, 4, 4, 3, 2,4, 5, 4, 2, 5, 3, 3, 3, 4, 3, 2, 4, 2, 4, 4, 1, 4, 4, 1, 1, 5, 2, 3, 3, 3, 4, 2, 2, 3, 5, 2, 3, 3, 3, 4, 2, 4, 3, 4, 4, 4, 5, 3, 2, 5, 3, 3, 2, 4, 6, 3, 2, 2, 2, 2, 6, 3, 3, 4, 3, 5, 3, 6, 3, 3, 5, 2, 6, 5, 6, 4, 3, 1, 1, 4, 4, 2, 5, 4, 2, 2, 5, 2, 3, 3, 1, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 3, 5, 4, 2, 5, 5, 2, 3,5, 4, 4, 2, 3, 5, 3, 2, 1, 2, 5, 3, 3, 4, 5, 4, 1, 6, 4, 3, 4, 3, 2, 3, 5, 4, 4, 3, 2, 2, 2, 2, 2, 2, 3, 4, 1, 3, 2, 3, 3, 2, 3, 4, 4, 2, 3, 2, 5, 4, 4)
pie3D(food, main = "Variety of Fish Food", labels =c("Food 1", "Food 2", "Food 3", "Food 4", "Food 5", "Food 6"), col=c("red", "green", "orange", "pink", "cyan", "blue"))
#draw line about zero on y-axis
abline(0,0)
summary(model_linear)
#Test for obtained statistics :
beta0 = model_linear$coefficients[1]
#setwd("E:/Learn-Git/machine_learning/R_Linear_Algebra")
#install.packages("plotrix")
library(plotrix)
food <-c(2, 3, 3, 4, 4, 4, 5, 3, 4, 2, 1, 5, 4, 1, 2, 3, 2, 5, 3, 3, 2, 5, 5, 2, 3, 5, 5, 4, 3, 4, 5, 4, 3, 2, 1, 4, 4, 5, 1, 5, 2, 4, 3, 3, 3, 5, 2, 4, 3, 4, 2, 3, 3, 1, 3, 3, 1, 3, 1, 4, 2, 2, 3, 4,5, 1, 5, 2, 5, 3, 2, 5, 3, 5, 3, 3, 1, 2, 6, 3, 4, 4, 3, 4, 3, 3, 2, 4, 5, 5, 1, 3, 4, 2, 4, 4, 5, 3, 4, 5, 3, 3, 2, 2, 2, 2, 3, 5, 3, 4, 3, 2, 3, 5, 3, 4, 6, 2, 3, 5, 2, 4, 3, 3, 3, 4, 6, 4, 2, 4, 1, 3, 4, 4, 3, 2, 5, 5, 3, 3, 4, 6, 3, 6, 4, 3, 3, 6, 3, 3, 3, 2, 4, 3, 3, 2, 3, 4, 3, 4, 4, 3, 5, 4, 5, 4, 2, 5, 4, 3, 2, 3, 2, 1, 3, 3, 2, 2, 3, 4, 2, 4, 3, 6 , 3, 2, 2, 4, 3, 1, 6, 3, 3, 3, 4, 5, 4, 3, 3, 4, 4, 6, 4, 2, 3, 2, 3, 4, 4, 2, 2, 5,5, 2, 3, 1, 2, 4, 3, 2, 3, 4, 3, 4, 1, 3, 4, 4, 4, 4, 2, 2, 5, 1, 2, 4, 3, 2, 3, 4, 5, 3, 3, 4, 4, 3, 4, 2, 2, 3, 3, 1, 3, 2, 2, 3, 3, 6, 3, 3, 2, 3, 5, 2, 1, 4, 3, 5, 3, 4, 2, 3, 2, 4, 2, 5, 2, 4, 2, 4, 3, 2, 4, 4, 2, 2, 3, 3, 3, 5, 4, 3, 5, 3, 2, 1, 4, 1, 3, 2, 4, 4, 2, 1, 2, 4, 5, 2, 1, 2, 1, 5, 4, 5, 4, 2, 4, 3, 2, 2, 5, 1, 4, 3, 4, 5, 3, 3, 2, 3, 3, 3, 3, 4, 6, 4, 3, 2, 4, 4, 3, 2,4, 5, 4, 2, 5, 3, 3, 3, 4, 3, 2, 4, 2, 4, 4, 1, 4, 4, 1, 1, 5, 2, 3, 3, 3, 4, 2, 2, 3, 5, 2, 3, 3, 3, 4, 2, 4, 3, 4, 4, 4, 5, 3, 2, 5, 3, 3, 2, 4, 6, 3, 2, 2, 2, 2, 6, 3, 3, 4, 3, 5, 3, 6, 3, 3, 5, 2, 6, 5, 6, 4, 3, 1, 1, 4, 4, 2, 5, 4, 2, 2, 5, 2, 3, 3, 1, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 3, 5, 4, 2, 5, 5, 2, 3,5, 4, 4, 2, 3, 5, 3, 2, 1, 2, 5, 3, 3, 4, 5, 4, 1, 6, 4, 3, 4, 3, 2, 3, 5, 4, 4, 3, 2, 2, 2, 2, 2, 2, 3, 4, 1, 3, 2, 3, 3, 2, 3, 4, 4, 2, 3, 2, 5, 4, 4)
pie3D(food, main = "Variety of Fish Food", labels =c("Food 1", "Food 2", "Food 3", "Food 4", "Food 5", "Food 6"), col=c("red", "green", "orange", "pink", "cyan", "blue"))
pie3D(table(food), main = "Variety of Fish Food", labels=c("Food 1", "Food 2", "Food 3", "Food 4", "Food 5", "Food 6"),  col=c("red", "green", "orange", "pink", "cyan", "blue"),explode=0.4)
pie3D(food, main = "Variety of Fish Food", labels =c("Food 1", "Food 2", "Food 3", "Food 4", "Food 5", "Food 6"), col=c("red", "green", "orange", "pink", "cyan", "blue"))
pie3D(food, main = "Variety of Fish Food", names.args =c("Food 1", "Food 2", "Food 3", "Food 4", "Food 5", "Food 6"), col=c("red", "green", "orange", "pink", "cyan", "blue"))
pie3D(food, main = "Variety of Fish Food", name.args =c("Food 1", "Food 2", "Food 3", "Food 4", "Food 5", "Food 6"), col=c("red", "green", "orange", "pink", "cyan", "blue"))
barplot(food, main = "Variety of Fish Food", name.args =c("Food 1", "Food 2", "Food 3", "Food 4", "Food 5", "Food 6"), col=c("red", "green", "orange", "pink", "cyan", "blue"))
barplot(table(food), main = "Variety of Fish Food", name.args =c("Food 1", "Food 2", "Food 3", "Food 4", "Food 5", "Food 6"), col=c("red", "green", "orange", "pink", "cyan", "blue"))
pie3D(table(food), main = "Variety of Fish Food", labels =c("Food 1", "Food 2", "Food 3", "Food 4", "Food 5", "Food 6"), col=c("red", "green", "orange", "pink", "cyan", "blue"))
pie3D(table(food), main = "Variety of Fish Food", labels =c("Food 1", "Food 2", "Food 3", "Food 4", "Food 5", "Food 6"),explode=.4 ,col=c("red", "green", "orange", "pink", "cyan", "blue"))
hist(data)
hist(table(walktime))
walktime <-c(62.11, 71.91, 98.22, 46.48, 55.96, 56.40, 33.88, 13.49, 53.73, 44.39, 78.30, 49.86, 42.96, 26.17, 74.54, 46.25, 53.56, 62.10, 55.80, 46.21, 66.80, 97.28, 54.25, 36.05, 82.09, 89.67, 11.23, 77.41, 56.33, 71.95, 23.77, 45.39, 84.34, 72.38, 86.17, 86.18, 49.04, 77.39, 54.99, 15.43, 36.16, 21.47, 49.65, 89.22, 35.69, 53.77, 76.82, 19.07, 36.42, 92.23, 79.45, 30.95, 18.57, 36.35, 48.14, 16.49, 77.48, 14.44, 12.86, 80.83, 61.62, 83.91, 96.18, 76.79, 16.61, 27.42, 66.81, 17.03, 61.37, 18.28, 37.49, 11.90, 73.68, 10.61, 79.57, 46.42, 30.62, 99.86, 45.32, 37.56, 52.03, 46.72, 68.82, 61.77, 88.57, 73.70, 55.73, 44.02, 17.38, 85.33, 53.52, 56.78, 34.63, 78.35, 41.36, 85.79, 44.32, 50.71, 61.86, 70.15, 14.32, 34.11, 50.23, 55.61, 92.27, 55.16, 75.65, 61.29, 30.96, 94.85, 82.86, 93.23, 49.55, 42.95, 43.16, 58.20, 52.39, 83.00, 32.28, 99.94, 54.70, 87.46, 72.68, 31.44, 39.10, 27.94, 26.34, 11.02, 68.26, 91.10, 67.25, 59.22, 33.12, 42.15, 74.69, 51.17, 16.94, 76.96, 47.75, 37.81, 60.21, 96.60, 69.73, 33.94, 49.80, 13.54, 75.33, 55.18, 12.36, 79.86, 85.36, 64.74, 50.30, 42.62, 56.06, 53.72, 78.84, 92.83, 28.11, 42.53, 86.41, 44.86, 49.58, 96.00, 29.56, 76.67, 34.00, 18.62, 42.49, 44.23, 61.45, 96.67, 22.46, 64.51, 87.61, 28.76, 30.39, 64.22, 70.08, 91.67, 67.71, 42.15, 59.64, 58.88, 50.48, 50.89, 80.32, 37.60, 32.06, 37.50, 25.16, 21.17, 63.98, 65.62, 21.69, 96.50, 86.33, 95.88, 30.25, 34.77, 49.61, 69.79, 79.23, 72.16, 69.86, 72.86, 17.76, 53.75, 84.30, 80.38, 80.75, 72.39, 80.77, 46.18, 29.13, 32.56, 43.43, 16.91, 63.84, 62.74, 59.12, 80.65, 25.26, 60.85, 41.08, 50.32, 78.38, 62.36, 67.57, 42.53, 93.23, 38.87, 27.95, 99.89, 44.98, 25.39, 41.69, 13.42, 41.00, 20.64, 89.49, 75.87, 25.12, 97.12, 40.25, 41.44, 34.39, 62.69, 74.57, 22.49, 80.36, 76.86, 28.04, 47.13, 40.63, 69.09, 23.75, 78.77, 94.06, 87.39, 39.73, 56.25, 74.39, 42.48, 36.79, 47.80, 53.36, 27.92, 49.63, 67.20, 41.95, 51.01, 12.99, 25.62, 24.24, 74.84, 29.68, 78.68, 58.70, 15.28, 12.30, 68.76, 66.71, 75.51, 74.63, 22.49, 56.03, 39.49, 56.11, 42.87, 59.53, 46.28, 67.60, 28.58, 19.70, 54.13, 21.12, 46.05, 21.93, 57.27, 48.00, 19.88, 62.60, 89.17, 41.04, 93.66, 50.12, 69.81, 76.07, 77.53, 95.04, 70.07, 73.01, 79.03, 16.91, 96.07, 85.44, 27.24, 12.11, 80.93, 62.04, 59.68, 73.72, 60.90, 40.14, 37.58, 24.41, 42.89, 79.36, 19.91, 28.61, 94.14, 42.28, 85.20, 37.23, 96.28, 93.29, 83.76, 21.61, 33.61, 20.90, 77.80, 55.27, 72.84, 41.90, 11.93, 22.12, 19.36, 62.83, 94.95, 28.17, 93.53, 32.68, 39.24, 83.49, 87.96, 34.60, 20.26, 88.83, 17.42, 96.90, 42.92, 79.18, 95.90, 92.47, 95.13, 82.28, 92.69, 61.03, 44.12, 72.55, 53.06, 92.82, 13.25, 70.06, 74.15, 41.70, 38.54, 91.99, 60.24, 23.85, 33.50, 72.90, 83.23, 28.24, 68.92, 87.54, 79.90, 80.38, 65.91, 12.67, 77.37, 88.25, 27.11, 83.51, 40.93, 82.66, 62.42, 38.15, 48.43)
hist(table(walktime))
hist((walktime))
hist((walktime),main="Time of walk")
hist((walktime),main="Time of walk",col="green")
hist((walktime),main="Time of walk",col="green",xlab="waltime" ,ylab = "Number of persons")
hist(table(walktime),main="Time of walk",col="green",xlab="waltime" ,ylab = "Number of persons")
hist((walktime),main="Time of walk",col="green",xlab="waltime" ,ylab = "Number of persons")
plot(density(walktime ,kernel='gaussian') ,main="Density of walking")
plot(density(walktime, kernel='gaussian'), main="Density of Walktime")
plot(density(walktime, kernel='rectangular'), main="Density of Walktime")
height <- c(3.54, 4.75, 6.44, 4.80, 6.08, 3.66, 4.28, 6.68, 6.01, 6.55, 5.89, 6.41, 6.03, 4.45, 5.94, 6.20, 3.86, 3.57, 3.77, 4.46, 6.46, 6.27, 5.18, 5.59, 6.76)
stemplot(height)
stem(height)
stem(height,scale=1)
height <- c(3.54, 4.75, 6.44, 4.80, 6.08, 3.66, 4.28, 6.68, 6.01, 6.55, 5.89, 6.41, 6.03, 4.45, 5.94, 6.20, 3.86, 3.57, 3.77, 4.46, 6.46, 6.27, 5.18, 5.59, 6.76 )
54, 4.75, 6.44, 4.80, 6.08, 3.66, 4.28, 6.68, 6.01, 6.55, 5.89, 6.41, 6.03, 4.45, 5.94, 6.20, 3.86, 3.57, 3.77, 4.46, 6.46, 6.27, 5.18, 5.59, 6.76 )
stem(height,scale=1)
stem(height,scale=2)
